syntax = "proto3";

option csharp_namespace = "SccsTrivia";
option java_multiple_files = true;
option java_package = "edu.augusta.sccs.trivia";
option java_outer_classname = "TriviaAppProto";
option objc_class_prefix = "HLW";

package trivia;

// The question service definition.
service TriviaQuestions {
  // Provides questions
  rpc GetQuestions (QuestionsRequest) returns (QuestionsReply) {}
  rpc GetPlayer (PlayerRequest) returns (PlayerReply) {}
  rpc GetAnswer (AnswerRequest) returns (AnswerReply) {}
}

// The request message containing the number of questions and difficulty.
message QuestionsRequest {
  int32 numberOfQuestions = 1; // the number of questions to return
  int32 difficulty = 2; // the difficulty level of the questions
}

// The reply message containing the number of questions and difficulty requested
message QuestionsReply {
  repeated Question questions = 1; // the set of questions
}

// The request message containing the user uuid
message PlayerRequest {
  string uuid = 1;
}

// The reply message containing the player
message PlayerReply {
  Player player = 1;
}

// The request message containing the player, question, and the players answer
message AnswerRequest {
  string playerUuid = 1;
  string questionUuid = 2;
  string answer = 3;
  AnswerType answerType = 4;
}

// The reply message containing the result of verifying the answer
message AnswerReply {
  bool correct = 1;
}

// a trivia question
message Question {
  string uuid = 1; // universal unique identifier for the question
  int32 difficulty = 2; // the difficulty level of the question
  string question = 3; // the text of the question to supply to user
  string answer = 4; // the correct answer to the question
  AnswerType answerType = 5; // the type of answer is needed to parse answer
  repeated string choices = 6; // multiple choice options
}

// a trivia player
message Player {
  string uuid =1; // universal unique identifier for the question
  string username = 2; // the username of the player
  int32 lastDifficulty = 3; // the difficulty of the last question
}

// The type of answer required for a question
enum AnswerType {
  MULTIPLE_CHOICE = 0;
  TRUE_FALSE = 1;
  SINGLE_WORD_ANSWER = 2;
}
